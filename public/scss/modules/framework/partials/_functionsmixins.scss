

// Fonctions et mixins SCSS


////////////////////////////////////////////////////////////////////////////////////
// Notation d'une couleur rgb sur base d'une seule valeur
////////////////////////////////////////////////////////////////////////////////////

@function rgb3($rgb) {
  @return rgb($rgb,$rgb,$rgb);
}




////////////////////////////////////////////////////////////////////////////////////
// Convertir des pixels en em
// $font-context = font-size de la police de base en pixel
////////////////////////////////////////////////////////////////////////////////////

@function em($pixels, $context: $font-context) {
  @return #{$pixels/$context}em
}




////////////////////////////////////////////////////////////////////////////////////
// Utiliser des rem avec un fallback en pixel by Karl Merkli
// $font-context = font-size de la police de base en pixel
// http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
////////////////////////////////////////////////////////////////////////////////////

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem-fix($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*$font-context}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}




////////////////////////////////////////////////////////////////////////////////////
// Keyframes pour tous les navigateurs
////////////////////////////////////////////////////////////////////////////////////

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}




////////////////////////////////////////////////////////////////////////////////////
// Animations pour tous les navigateurs
////////////////////////////////////////////////////////////////////////////////////

@mixin animation($name, $time, $type){
  -webkit-animation: $name $time $type;
  -moz-animation:    $name $time $type;
  -o-animation:      $name $time $type;
  -ms-animation:     $name $time $type;
  animation:         $name $time $type;
}


////////////////////////////////////////////////////////////////////////////////////
// Génération de triangle SVG
////////////////////////////////////////////////////////////////////////////////////

@mixin triangle-svg( $color: FFF, $height: 10, $direction: bottom-left,$position: top, $pseudoElement: after ){
  &:#{$pseudoElement}{
  content: '';
  position:absolute;

  @if unquote( $position ) == top{
    top:0;
  }


  @if unquote( $position ) == bottom{
    bottom:0;
  }

  left: 0;
  right: 0;
  @include rem-fix(height, $height);
  background-size: 100% 100%;
  display: block;
  $path : 'M0 100 L0 0 L100 0';
  @if unquote( $direction ) == top-left{
    $path : 'M0 100 L0 0 L100 0';
  }
  @else if unquote( $direction ) == top-right{
    $path : 'M0 0 L100 0 L100 100';
  }
  @else if unquote( $direction ) == bottom-left{
    $path : 'M0 0 L0 100 L100 100';
  }
  @else if unquote( $direction ) == bottom-right{
    $path : 'M0 100 L100 0 L100 100';
  }
  @else if unquote( $direction ) == bottom-center{
    $path : 'M0 0 L50 100 L100 0';
  }

  background-image: url("data:image/svg+xml;utf8,<svg preserveAspectRatio='none' version='1.1' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'><path d='#{$path}' fill='%23#{$color}'></path></svg>");

}
}